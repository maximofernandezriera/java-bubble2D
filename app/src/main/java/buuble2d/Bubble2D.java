/*
 * This source file was generated by the Gradle 'init' task
 */
package buuble2d;

public class Bubble2D {

    public static void main(String[] args) {
        
        // Ejemplo de uso del método bubbleSort2D
        int[][] matriz = {
            {9, 11, 7},
            {6, 3, 4},
            {8, 5, 1}
        };
        
        System.out.println("Matriz original:");
        imprimirMatriz(matriz);
        
        // Ordenar ascendente (true para ascendente)
        bubbleSort2D(matriz, true);
        
        System.out.println("\nMatriz ordenada ascendente:");
        imprimirMatriz(matriz);
        
        // Ordenar descendente (false para descendente)
        bubbleSort2D(matriz, false);
        
        System.out.println("\nMatriz ordenada descendente:");
        imprimirMatriz(matriz);
    }
    
    /**
     * Ordena una matriz bidimensional usando el algoritmo de la burbuja.
     * @param matriz La matriz bidimensional a ordenar
     * @param ascendente true para ordenar ascendente, false para descendente
     */
    public static void bubbleSort2D(int[][] matriz, boolean ascendente) {
        if (matriz == null || matriz.length == 0 || matriz[0].length == 0) {
            return; // Matriz vacía o nula
        }
        
        int filas = matriz.length;
        int columnas = matriz[0].length;
        int totalElementos = filas * columnas;
        
        for (int i = 0; i < totalElementos - 1; i++) {
            for (int j = 0; j < totalElementos - i - 1; j++) {
                // Calcular coordenadas/celdas actuales y siguientes
                int filaActual = j / columnas;
                int columnaActual = j % columnas;
                int filaSiguiente = (j + 1) / columnas;
                int columnaSiguiente = (j + 1) % columnas;
                
                // Comparar según el orden (ascendente o descendente)
                if (ascendente) {
                    if (matriz[filaActual][columnaActual] > matriz[filaSiguiente][columnaSiguiente]) {
                        // Intercambiar elementos
                        int temp = matriz[filaActual][columnaActual];
                        matriz[filaActual][columnaActual] = matriz[filaSiguiente][columnaSiguiente];
                        matriz[filaSiguiente][columnaSiguiente] = temp;
                    }
                } else {
                    if (matriz[filaActual][columnaActual] < matriz[filaSiguiente][columnaSiguiente]) {
                        // Intercambiar elementos
                        int temp = matriz[filaActual][columnaActual];
                        matriz[filaActual][columnaActual] = matriz[filaSiguiente][columnaSiguiente];
                        matriz[filaSiguiente][columnaSiguiente] = temp;
                    }
                }
            }
        }
    }
    
    /**
     * Imprime una matriz bidimensional.
     * @param matriz La matriz a imprimir
     */
    public static void imprimirMatriz(int[][] matriz) {
        for (int[] fila : matriz) {
            for (int valor : fila) {
                System.out.print(valor + " ");
            }
            System.out.println();
        }
    }
}
